{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sanjana/Documents/BMS/FinalYearProjectTest/Malware-Detection-july-13/pages/campaigns/show.js\";\nimport React, { Component } from 'react';\nimport { Card, Grid, Button, Segment, Header, Icon } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport Campaign from '../../ethereum/malware';\nimport web3 from '../../ethereum/web3';\nimport ConsentForm from '../../components/ConsentForm';\nimport ByteForm from '../../components/ByteForm';\nimport GetFileFormMalware from '../../components/GetFileFormMalware';\nimport { Link } from '../../routes';\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    const campaign = Campaign(props.query.address);\n    const summary = await campaign.methods.getSummary().call();\n    return {\n      address: props.query.address,\n      addedAddress: summary[0],\n      prob: summary[1],\n      deployedUser: summary[2],\n      MalwareHash: summary[3],\n      amount: summary[4],\n      perCentMalware: summary[5]\n    };\n  }\n\n  renderCards() {\n    const {\n      address,\n      prob,\n      deployedUser,\n      MalwareHash,\n      amount,\n      perCentMalware\n    } = this.props;\n    const items = [{\n      header: deployedUser,\n      meta: 'Address of User',\n      description: 'The user uploaded this malware.',\n      style: {\n        overflowWrap: 'break-word'\n      },\n      color: 'blue'\n    }, {\n      header: amount,\n      meta: 'Amount(wei)',\n      description: 'This amount offered by user for getting files checked.',\n      color: 'blue'\n    }, {\n      header: address,\n      meta: 'Address of Malware',\n      description: 'Address of current malware contract',\n      style: {\n        overflowWrap: 'break-word'\n      },\n      color: 'blue'\n    }, {\n      header: perCentMalware,\n      meta: 'Percent of malware',\n      description: 'Percent of malware detected after nodes report',\n      color: 'blue'\n    }, {\n      header: MalwareHash,\n      meta: 'Hash of Malware',\n      description: 'The sha256 hash for this malware',\n      style: {\n        overflowWrap: 'break-word'\n      },\n      color: 'blue'\n    }, {\n      header: prob,\n      meta: 'Probabilty Malware',\n      description: '',\n      style: {\n        overflowWrap: 'break-word'\n      },\n      color: 'blue'\n    }];\n    return /*#__PURE__*/_jsxDEV(Card.Group, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Segment.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Segment, {\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            as: \"h3\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"bug\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 13\n            }, this), \"Details\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Segment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n              children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 10,\n                children: this.renderCards()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n                width: 6,\n                children: [/*#__PURE__*/_jsxDEV(ConsentForm, {\n                  address: this.props.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 26\n                }, this), /*#__PURE__*/_jsxDEV(GetFileFormMalware, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CampaignShow;","map":{"version":3,"sources":["/home/sanjana/Documents/BMS/FinalYearProjectTest/Malware-Detection-july-13/pages/campaigns/show.js"],"names":["React","Component","Card","Grid","Button","Segment","Header","Icon","Layout","Campaign","web3","ConsentForm","ByteForm","GetFileFormMalware","Link","CampaignShow","getInitialProps","props","campaign","query","address","summary","methods","getSummary","call","addedAddress","prob","deployedUser","MalwareHash","amount","perCentMalware","renderCards","items","header","meta","description","style","overflowWrap","color","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,OAA7B,EAAqCC,MAArC,EAA4CC,IAA5C,QAAuD,mBAAvD;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AAKA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,YAAN,SAA2Bd,SAA3B,CAAqC;AACnC,eAAae,eAAb,CAA6BC,KAA7B,EAAoC;AAClC,UAAMC,QAAQ,GAAGT,QAAQ,CAACQ,KAAK,CAACE,KAAN,CAAYC,OAAb,CAAzB;AAEA,UAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiBC,UAAjB,GAA8BC,IAA9B,EAAtB;AAGA,WAAO;AACLJ,MAAAA,OAAO,EAAEH,KAAK,CAACE,KAAN,CAAYC,OADhB;AAELK,MAAAA,YAAY,EAAEJ,OAAO,CAAC,CAAD,CAFhB;AAGLK,MAAAA,IAAI,EAAEL,OAAO,CAAC,CAAD,CAHR;AAILM,MAAAA,YAAY,EAAEN,OAAO,CAAC,CAAD,CAJhB;AAKLO,MAAAA,WAAW,EAAEP,OAAO,CAAC,CAAD,CALf;AAMLQ,MAAAA,MAAM,EAAER,OAAO,CAAC,CAAD,CANV;AAOLS,MAAAA,cAAc,EAAET,OAAO,CAAC,CAAD;AAPlB,KAAP;AAWD;;AAEDU,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJX,MAAAA,OADI;AAEJM,MAAAA,IAFI;AAGJC,MAAAA,YAHI;AAIJC,MAAAA,WAJI;AAKJC,MAAAA,MALI;AAMJC,MAAAA;AANI,QASF,KAAKb,KATT;AAWA,UAAMe,KAAK,GAAG,CACZ;AACEC,MAAAA,MAAM,EAAEN,YADV;AAEEO,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,WAAW,EACT,iCAJJ;AAKEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OALT;AAMEC,MAAAA,KAAK,EAAG;AANV,KADY,EAUZ;AACEL,MAAAA,MAAM,EAAEJ,MADV;AAEEK,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,WAAW,EACT,wDAJJ;AAKEG,MAAAA,KAAK,EAAG;AALV,KAVY,EAiBZ;AACEL,MAAAA,MAAM,EAAEb,OADV;AAEEc,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EACT,qCAJJ;AAKEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OALT;AAMEC,MAAAA,KAAK,EAAG;AANV,KAjBY,EAyBZ;AACEL,MAAAA,MAAM,EAAEH,cADV;AAEEI,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EACT,gDAJJ;AAKEG,MAAAA,KAAK,EAAG;AALV,KAzBY,EAgCZ;AACEL,MAAAA,MAAM,EAAEL,WADV;AAEEM,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,WAAW,EACT,kCAJJ;AAKEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OALT;AAMEC,MAAAA,KAAK,EAAG;AANV,KAhCY,EAwCd;AACEL,MAAAA,MAAM,EAAEP,IADV;AAEEQ,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,WAAW,EACT,EAJJ;AAKEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OALT;AAMEC,MAAAA,KAAK,EAAG;AANV,KAxCc,CAAd;AAmDA,wBAAO,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEN;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAA,6BAEE,QAAC,OAAD,CAAS,KAAT;AAAA,gCAEA,QAAC,OAAD;AAAA,iCACA,QAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,IAAX;AAAA,oCACI,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,oBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAFA,eASM,QAAC,OAAD;AAAA,iCAEN,QAAC,IAAD;AAAA,mCACE,QAAC,IAAD,CAAM,GAAN;AAAA,sCACE,QAAC,IAAD,CAAM,MAAN;AAAa,gBAAA,KAAK,EAAE,EAApB;AAAA,0BAAyB,KAAKR,WAAL;AAAzB;AAAA;AAAA;AAAA;AAAA,sBADF,eAGE,QAAC,IAAD,CAAM,MAAN;AAAa,gBAAA,KAAK,EAAE,CAApB;AAAA,wCACI,QAAC,WAAD;AAAa,kBAAA,OAAO,EAAE,KAAKd,KAAL,CAAWG;AAAjC;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEQ;AAAA;AAAA;AAAA;AAAA,wBAFR,eAEa;AAAA;AAAA;AAAA;AAAA,wBAFb,eAGI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,wBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFM;AAAA;AAAA;AAAA;AAAA,gBATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF;AAiCD;;AAxHkC;;AA2HrC,eAAeL,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Grid, Button ,Segment,Header,Icon} from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport Campaign from '../../ethereum/malware';\nimport web3 from '../../ethereum/web3';\nimport ConsentForm from '../../components/ConsentForm';\nimport ByteForm from '../../components/ByteForm';\nimport GetFileFormMalware from '../../components/GetFileFormMalware';\n\n\n\n\nimport { Link } from '../../routes';\n\nclass CampaignShow extends Component {\n  static async getInitialProps(props) {\n    const campaign = Campaign(props.query.address);\n\n    const summary = await campaign.methods.getSummary().call();\n\n\n    return {\n      address: props.query.address,\n      addedAddress: summary[0],\n      prob: summary[1],\n      deployedUser: summary[2],\n      MalwareHash: summary[3],\n      amount: summary[4],\n      perCentMalware: summary[5],\n\n\n    };\n  }\n\n  renderCards() {\n    const {\n      address,\n      prob,\n      deployedUser,\n      MalwareHash,\n      amount,\n      perCentMalware,\n\n\n    } = this.props;\n\n    const items = [\n      {\n        header: deployedUser,\n        meta: 'Address of User',\n        description:\n          'The user uploaded this malware.',\n        style: { overflowWrap: 'break-word' },\n        color : 'blue',\n\n      },\n      {\n        header: amount,\n        meta: 'Amount(wei)',\n        description:\n          'This amount offered by user for getting files checked.',\n        color : 'blue'\n      },\n      {\n        header: address,\n        meta: 'Address of Malware',\n        description:\n          'Address of current malware contract',\n        style: { overflowWrap: 'break-word' },\n        color : 'blue'\n      },\n      {\n        header: perCentMalware,\n        meta: 'Percent of malware',\n        description:\n          'Percent of malware detected after nodes report',\n        color : 'blue'\n      },\n      {\n        header: MalwareHash,\n        meta: 'Hash of Malware',\n        description:\n          'The sha256 hash for this malware',\n        style: { overflowWrap: 'break-word' },\n        color : 'blue'\n    },\n    {\n      header: prob,\n      meta: 'Probabilty Malware',\n      description:\n        '',\n      style: { overflowWrap: 'break-word' },\n      color : 'blue'\n    }\n\n    ];\n\n    return <Card.Group items={items} />;\n  }\n\n  render() {\n    return (\n      <Layout>\n\n        <Segment.Group>\n\n        <Segment>\n        <Header as='h3'>\n            <Icon name='bug' />\n           Details\n        </Header>\n        </Segment>\n\n              <Segment>\n\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={10}>{this.renderCards()}</Grid.Column>\n\n            <Grid.Column width={6}>\n                <ConsentForm address={this.props.address} />\n                    <br/><br/>\n                <GetFileFormMalware/>\n            </Grid.Column>\n\n          </Grid.Row>\n\n        </Grid>\n        </Segment>\n        </Segment.Group>\n\n\n      </Layout>\n    );\n  }\n}\n\nexport default CampaignShow;\n"]},"metadata":{},"sourceType":"module"}